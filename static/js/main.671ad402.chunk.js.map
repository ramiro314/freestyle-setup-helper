{"version":3,"sources":["helpers/measurements.js","components/MeasurementInput.js","components/Section.js","components/SectionLabel.js","components/SubSection.js","components/Truck.js","components/Wheel.js","components/Result.js","components/Notes.js","components/Washer.js","components/App.js","reportWebVitals.js","index.js"],"names":["INCHES","MILLIMETERS","toInches","value","unit","Error","unitSymbol","Option","Select","step","allowNegativeValue","negativeValue","Number","MIN_SAFE_INTEGER","MeasurementInput","defaultValue","defaultUnit","onChange","f","useState","setValue","setUnit","onChangeUnit","u","className","addonAfter","selectAfter","min","v","Section","props","direction","align","style","width","children","SectionLabel","title","SubSection","Truck","options","truck","setTruck","axle_width_value","axle_width_unit","hanger_width_value","hanger_width_unit","customTruck","setCustomTruck","customInput","newValue","onSelect","item","Wheel","wheel","setWheel","width_value","width_unit","customWheel","setCustomWheel","Text","Typography","calculateHangerWheelsInImperial","washer","amount","Deck","deck","strong","toFixed","Panel","Collapse","data","Notes","ghost","header","bordered","dataSource","renderItem","Item","Washer","setWasher","Header","Layout","Content","Footer","Title","App","deckOptions","label","decks","map","id","manufacturer","name","truckOptions","trucks","wheelOptions","wheels","color","padding","alignSelf","Result","textAlign","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.671ad402.chunk.js","sourcesContent":["export const INCHES = 'in';\r\nexport const MILLIMETERS = 'mm';\r\n\r\nexport const toInches = (value, unit) => {\r\n    switch (unit) {\r\n        case INCHES:\r\n            return value;\r\n        case MILLIMETERS:\r\n            return value / 25.4;\r\n        default:\r\n            throw new Error(`Unknown unit ${unit}`);\r\n    }\r\n};\r\n\r\nexport const toMillimeter = (value, unit) => {\r\n    switch (unit) {\r\n        case INCHES:\r\n            return value * 25.4;\r\n        case MILLIMETERS:\r\n            return value;\r\n        default:\r\n            throw new Error(`Unknown unit ${unit}`);\r\n    }\r\n};\r\n\r\nexport const unitSymbol = (unit) => (\r\n    unit === INCHES ? '\"' : unit\r\n);\r\n","import React, {useState} from \"react\";\r\nimport { InputNumber, Select } from 'antd';\r\nimport {INCHES, MILLIMETERS} from \"../helpers/measurements\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst step = (unit) => {\r\n  return unit === INCHES ? 0.1 : 1;\r\n};\r\n\r\nconst allowNegativeValue = (negativeValue) => {\r\n  return negativeValue ? Number.MIN_SAFE_INTEGER : 0;\r\n};\r\n\r\nconst MeasurementInput = ({ defaultValue = 0, defaultUnit = INCHES, negativeValue = false, onChange = f => f }) => {\r\n\r\n    const [value, setValue] = useState(defaultValue);\r\n    const [unit, setUnit] = useState(defaultUnit);\r\n\r\n    const onChangeValue = (v) => {\r\n        setValue(v)\r\n        onChange(v, unit)\r\n    }\r\n\r\n    const onChangeUnit = (u) => {\r\n        setUnit(u)\r\n        onChange(value, u)\r\n    }\r\n\r\n    const selectAfter = (defaultUnit = INCHES) => (\r\n        <Select defaultValue={defaultUnit} className=\"select-after\" onChange={onChangeUnit}>\r\n            <Option value={INCHES}>in</Option>\r\n            <Option value={MILLIMETERS}>mm</Option>\r\n        </Select>\r\n    );\r\n    return (\r\n        <InputNumber\r\n            className=\"MeasurementInput\"\r\n            addonAfter={selectAfter(unit)}\r\n            defaultValue={value}\r\n            step={step(unit)}\r\n            min={allowNegativeValue(negativeValue)}\r\n            onChange={onChangeValue}\r\n        />);\r\n};\r\n\r\nexport default MeasurementInput;\r\n","import React from \"react\";\r\nimport {Space} from 'antd';\r\n\r\nconst Section = (props) => {\r\n    return (\r\n        <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r\n            {props.children}\r\n        </Space>\r\n    )\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst SectionLabel = ({title = ''}) => {\r\n    return (\r\n        <div className=\"ant-form-item-label\">\r\n            <label title={title}>\r\n                {title}\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SectionLabel;\r\n","import React from \"react\";\r\nimport {Space} from 'antd';\r\nimport SectionLabel from \"./SectionLabel\";\r\n\r\nconst SubSection = (props) => {\r\n    return (\r\n        <Space>\r\n            <SectionLabel title={props.title} />\r\n            {props.children}\r\n        </Space>)\r\n};\r\n\r\nexport default SubSection;\r\n","import React, {useState} from \"react\";\r\nimport {Select} from 'antd';\r\nimport MeasurementInput from \"./MeasurementInput\";\r\nimport {INCHES} from \"../helpers/measurements\";\r\nimport Section from \"./Section\";\r\nimport SubSection from \"./SubSection\";\r\n\r\nconst Truck = ({options, truck, setTruck = f => f}) => {\r\n\r\n    const [customTruck, setCustomTruck] = useState({\r\n        axle_width_value: 7.25,\r\n        axle_width_unit: INCHES,\r\n        hanger_width_value: 4.6,\r\n        hanger_width_unit: INCHES,\r\n        ...options[0]\r\n    });\r\n\r\n    const onChangeSelect = (item) => {\r\n        if (item === 0) {\r\n            setTruck(customTruck)\r\n        }else{\r\n            setTruck(options[item]);\r\n        }\r\n    };\r\n\r\n    const onChangeCustomAxle = (value, unit) => {\r\n        const newValue = {...customTruck, axle_width_value: value, axle_width_unit: unit};\r\n        setCustomTruck(newValue);\r\n        setTruck(newValue);\r\n    }\r\n\r\n    const onChangeCustomHanger = (value, unit) => {\r\n        const newValue = {...customTruck, hanger_width_value: value, hanger_width_unit: unit};\r\n        setCustomTruck(newValue);\r\n        setTruck(newValue);\r\n    }\r\n\r\n    const customInput = (\r\n        <>\r\n            {/*<SubSection title=\"Axle Width\">*/}\r\n            {/*    <MeasurementInput*/}\r\n            {/*        defaultValue={customTruck.axle_width_value}*/}\r\n            {/*        defaultUnit={customTruck.axle_width_unit}*/}\r\n            {/*        onChange={onChangeCustomAxle}*/}\r\n            {/*    />*/}\r\n            {/*</SubSection>*/}\r\n            <SubSection title=\"Hanger Width\">\r\n                <MeasurementInput\r\n                    defaultValue={customTruck.hanger_width_value}\r\n                    defaultUnit={customTruck.hanger_width_unit}\r\n                    onChange={onChangeCustomHanger}\r\n                />\r\n            </SubSection>\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <Section title=\"Truck\">\r\n            <Select\r\n                value={truck.value}\r\n                options={options}\r\n                onSelect={onChangeSelect}\r\n                style={{ width: 270 }}\r\n            />\r\n            {truck.value === 0 && customInput}\r\n        </Section>);\r\n};\r\n\r\nexport default Truck;\r\n","import React, {useState} from \"react\";\r\nimport {Select} from 'antd';\r\nimport MeasurementInput from \"./MeasurementInput\";\r\nimport {MILLIMETERS} from \"../helpers/measurements\";\r\nimport Section from \"./Section\";\r\nimport SubSection from \"./SubSection\";\r\n\r\nconst Wheel = ({options, wheel, setWheel = f => f}) => {\r\n\r\n    const [customWheel, setCustomWheel] = useState({\r\n        width_value: 36,\r\n        width_unit: MILLIMETERS,\r\n        ...options[0]\r\n    });\r\n\r\n    const onChangeSelect = (item) => {\r\n        if (item === 0) {\r\n            setWheel(customWheel)\r\n        }else{\r\n            setWheel(options[item]);\r\n        }\r\n    };\r\n\r\n    const onChangeCustom = (value, unit) => {\r\n        const newValue = {...customWheel, width_value: value, width_unit: unit};\r\n        setCustomWheel(newValue);\r\n        setWheel(newValue);\r\n    }\r\n\r\n    const customInput = (\r\n        <SubSection title=\"Width\">\r\n            <MeasurementInput\r\n                defaultValue={customWheel.width_value}\r\n                defaultUnit={customWheel.width_unit}\r\n                onChange={onChangeCustom}\r\n            />\r\n        </SubSection>\r\n    )\r\n\r\n    return (\r\n        <Section title=\"Wheel\">\r\n            <Select\r\n                value={wheel.value}\r\n                options={options}\r\n                onSelect={onChangeSelect}\r\n                style={{ width: 270 }}\r\n            />\r\n            {wheel.value === 0 && customInput}\r\n        </Section>);\r\n};\r\n\r\nexport default Wheel;\r\n","import React from \"react\";\r\nimport {Typography} from 'antd';\r\nimport {MILLIMETERS, toInches, toMillimeter} from \"../helpers/measurements\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst calculateHangerWheelsInImperial = (truck, wheel, washer) => {\r\n    return toInches(truck.hanger_width_value, truck.hanger_width_unit) +\r\n        toInches(wheel.width_value, wheel.width_unit) * 2 +\r\n        toInches(washer.width_value, washer.width_unit) * washer.amount\r\n};\r\n\r\nconst calculateHangerWheelsInMetric = (truck, wheel, washer) => {\r\n    // Doesn't work?\r\n    return toMillimeter(calculateHangerWheelsInImperial(truck, wheel, washer), MILLIMETERS)\r\n};\r\n\r\nconst Deck = ({deck, truck, wheel, washer}) => (\r\n        <>\r\n            <Text strong>The complete width of your trucks and wheels will be {calculateHangerWheelsInImperial(truck, wheel, washer).toFixed(3)}\"</Text>\r\n        </>\r\n);\r\n\r\nexport default Deck;\r\n","import React from \"react\";\r\nimport {Collapse, List} from 'antd';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst data = [\r\n    'VERY Alpha version.',\r\n    'This currently only works with completely offset wheels. I\\'m working on adding supoport for other kinds of wheels',\r\n    'I would like some kind of diagram to help with visualisation.',\r\n];\r\n\r\nconst Notes = () => {\r\n    return (\r\n        <Collapse ghost>\r\n            <Panel header=\"Notes\">\r\n                <List bordered dataSource={data} renderItem={item => <List.Item>- {item}</List.Item>}/>\r\n            </Panel>\r\n        </Collapse>\r\n    )\r\n};\r\n\r\nexport default Notes;\r\n","import React from \"react\";\r\nimport {InputNumber} from 'antd';\r\nimport MeasurementInput from \"./MeasurementInput\";\r\nimport Section from \"./Section\";\r\nimport SubSection from \"./SubSection\";\r\n\r\nconst Washer = ({washer, setWasher = f => f}) => {\r\n    const onChangeAmount = (value) => {\r\n        setWasher({...washer, amount: value});\r\n    }\r\n\r\n    const onChangeWidth = (value, unit) => {\r\n        setWasher({...washer, width_value: value, width_unit: unit});\r\n    }\r\n\r\n    return (\r\n        <Section title=\"Washers\">\r\n            <SubSection title=\"Amount\">\r\n                <InputNumber\r\n                    className=\"MeasurementInput\"\r\n                    defaultValue={washer.amount}\r\n                    min={0}\r\n                    onChange={onChangeAmount}\r\n                />\r\n            </SubSection>\r\n            <SubSection title=\"Width\">\r\n                <MeasurementInput\r\n                    defaultValue={washer.width_value}\r\n                    defaultUnit={washer.width_unit}\r\n                    onChange={onChangeWidth}\r\n                />\r\n            </SubSection>\r\n        </Section>);\r\n};\r\n\r\nexport default Washer;\r\n","import React, {useState} from 'react';\nimport {Typography, Layout, Space, Divider} from 'antd';\nimport './App.css';\nimport Deck from \"./Deck\";\nimport Truck from \"./Truck\";\nimport Wheel from \"./Wheel\";\nimport Result from \"./Result\";\nimport {MILLIMETERS, unitSymbol} from \"../helpers/measurements\";\nimport decks from \"../data/decks.json\";\nimport trucks from \"../data/trucks.json\";\nimport wheels from \"../data/wheels.json\";\nimport Notes from \"./Notes\";\nimport Washer from \"./Washer\";\n\nconst { Header, Content, Footer } = Layout;\nconst { Title } = Typography;\n\nconst App = () => {\n    const deckOptions = [\n        {value: 0, label: \"Custom\"},\n        ...decks.map(deck => ({\n            value: deck.id,\n            label: `${deck.manufacturer} ${deck.name} (${deck.width_value}${unitSymbol(deck.width_unit)})`,\n            ...deck\n        }))\n    ];\n    const [deck, setDeck] = useState(deckOptions[1]);\n\n    const truckOptions = [\n        {value: 0, label: \"Custom\"},\n        ...trucks.map(truck => ({\n            value: truck.id,\n            label: `${truck.manufacturer} ${truck.name} (${truck.axle_width_value}${unitSymbol(truck.axle_width_unit)})`,\n            ...truck\n        }))\n    ];\n    const [truck, setTruck] = useState(truckOptions[1]);\n\n    const wheelOptions = [\n        {value: 0, label: \"Custom\"},\n        ...wheels.map(wheel => ({\n            value: wheel.id,\n            label: `${wheel.manufacturer} ${wheel.name} (${wheel.width_value}${unitSymbol(wheel.width_unit)})`,\n            ...wheel\n        }))\n    ];\n    const [wheel, setWheel] = useState(wheelOptions[1]);\n\n    const [washer, setWasher] = useState({\n        amount: 1,\n        width_value: 1,\n        width_unit: MILLIMETERS,\n    });\n\n    return (\n        <Layout className=\"layout\">\n            <Header>\n                <Title style={{ color: 'white' }}>Freestyle Setup Helper</Title>\n            </Header>\n            <Content style={{ padding: '0 50px', alignSelf: 'center' }}>\n                <Space direction=\"vertical\">\n                    <Notes />\n                    {/*<Divider>Deck</Divider>*/}\n                    {/*<Deck options={deckOptions} deck={deck} setDeck={setDeck}/>*/}\n                    <Divider>Trucks</Divider>\n                    <Truck options={truckOptions} truck={truck} setTruck={setTruck}/>\n                    <Divider>Wheels</Divider>\n                    <Wheel options={wheelOptions} wheel={wheel} setWheel={setWheel}/>\n                    <Divider>Washers</Divider>\n                    <Washer washer={washer} setWasher={setWasher}/>\n                    <Divider>Result</Divider>\n                    <Result deck={deck} truck={truck} wheel={wheel} washer={washer}/>\n                </Space>\n            </Content>\n            <Divider/>\n            <Footer style={{ textAlign: 'center' }}>Designed and developed by the <a href=\"https://discord.gg/6SB27XCc\">Waltz Discord community</a>.</Footer>\n        </Layout>\n    )\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/MeasurementInput.js","components/Deck.js","components/Truck.js","components/Wheel.js","helpers/measurements.js","components/Result.js","components/Notes.js","components/App.js","reportWebVitals.js","index.js"],"names":["Option","Select","selectAfter","defaultValue","className","value","MeasurementInput","addonAfter","Deck","options","deck","setDeck","f","customImput","Item","label","direction","onSelect","item","style","width","Truck","truck","setTruck","Wheel","wheel","setWheel","toInches","unit","Error","unitSymbol","Text","Typography","calculateHangerWheelsInMetric","toMillimeter","hanger_width_value","hanger_width_unit","width_value","width_unit","calculateHangerWheelsInImperial","toFixed","Panel","Collapse","data","Notes","ghost","header","bordered","dataSource","renderItem","Title","App","deckOptions","decks","map","id","manufacturer","name","useState","truckOptions","trucks","axle_width_value","axle_width_unit","wheelOptions","wheels","Result","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d110716.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { InputNumber, Select } from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\nconst selectAfter = (\r\n    <Select defaultValue=\"in\" className=\"select-after\">\r\n        <Option value=\"in\">in</Option>\r\n        <Option value=\"mm\">mm</Option>\r\n    </Select>\r\n);\r\n\r\nconst MeasurementInput = ({ defaultValue = '' }) => (\r\n    <InputNumber addonAfter={selectAfter} defaultValue={defaultValue} />\r\n);\r\n\r\nexport default MeasurementInput;\r\n","import React from \"react\";\r\nimport {Form, Select, Space} from 'antd';\r\nimport MeasurementInput from \"./MeasurementInput\";\r\n\r\nconst Deck = ({options, deck, setDeck = f => f}) => {\r\n\r\n    const onchangeSelect = (item) => {\r\n        setDeck(options[item]);\r\n    };\r\n\r\n    const customImput = (\r\n        <Form.Item label=\"Deck Width\">\r\n            <MeasurementInput defaultValue={7.6}/>\r\n        </Form.Item>\r\n    )\r\n\r\n    return (<div className=\"Deck\">\r\n        <Space direction=\"vertical\">\r\n            <Form.Item label=\"Deck\">\r\n                <Select\r\n                    value={deck.value}\r\n                    options={options}\r\n                    onSelect={onchangeSelect}\r\n                    style={{ width: 250 }}\r\n                />\r\n            </Form.Item>\r\n            {deck.value === 0 && customImput}\r\n        </Space>\r\n    </div>);\r\n};\r\n\r\nexport default Deck;\r\n","import React from \"react\";\r\nimport {Form, Select, Space} from 'antd';\r\nimport MeasurementInput from \"./MeasurementInput\";\r\n\r\nconst Truck = ({options, truck, setTruck = f => f}) => {\r\n\r\n    const onchangeSelect = (item) => {\r\n        setTruck(options[item]);\r\n    };\r\n\r\n    const customImput = (\r\n        <>\r\n            <Form.Item label=\"Axle Width\">\r\n                <MeasurementInput defaultValue={7.6}/>\r\n            </Form.Item>\r\n            <Form.Item label=\"Hanger Width\">\r\n                <MeasurementInput defaultValue={7.6}/>\r\n            </Form.Item>\r\n        </>\r\n    )\r\n\r\n    return (<div className=\"Truck\">\r\n        <Space direction=\"vertical\">\r\n            <Form.Item label=\"Truck\">\r\n                <Select\r\n                    value={truck.value}\r\n                    options={options}\r\n                    onSelect={onchangeSelect}\r\n                    style={{ width: 250 }}\r\n                />\r\n            </Form.Item>\r\n            {truck.value === 0 && customImput}\r\n        </Space>\r\n    </div>);\r\n};\r\n\r\nexport default Truck;\r\n","import React from \"react\";\r\nimport {Form, Select, Space} from 'antd';\r\nimport MeasurementInput from \"./MeasurementInput\";\r\n\r\nconst Wheel = ({options, wheel, setWheel = f => f}) => {\r\n\r\n    const onchangeSelect = (item) => {\r\n        setWheel(options[item]);\r\n    };\r\n    const customImput = (\r\n        <Form.Item label=\"Wheel Width\">\r\n            <MeasurementInput defaultValue={7.6}/>\r\n        </Form.Item>\r\n    )\r\n\r\n    return (<div className=\"Wheel\">\r\n        <Space direction=\"vertical\">\r\n            <Form.Item label=\"Wheel\">\r\n                <Select\r\n                    value={wheel.value}\r\n                    options={options}\r\n                    onSelect={onchangeSelect}\r\n                    style={{ width: 250 }}\r\n                />\r\n            </Form.Item>\r\n            {wheel.value === 0 && customImput}\r\n        </Space>\r\n    </div>);\r\n};\r\n\r\nexport default Wheel;\r\n","export const toInches = (value, unit) => {\r\n    switch (unit) {\r\n        case \"in\":\r\n            return value;\r\n        case \"mm\":\r\n            return value / 25.4;\r\n        default:\r\n            throw new Error(`Unknown unit ${unit}`);\r\n    }\r\n};\r\n\r\nexport const toMillimeter = (value, unit) => {\r\n    switch (unit) {\r\n        case \"in\":\r\n            return value * 25.4;\r\n        case \"mm\":\r\n            return value;\r\n        default:\r\n            throw new Error(`Unknown unit ${unit}`);\r\n    }\r\n};\r\n\r\nexport const unitSymbol = (unit) => (\r\n    unit === \"in\" ? '\"' : unit\r\n);\r\n","import React from \"react\";\r\nimport {Typography} from 'antd';\r\nimport {toInches, toMillimeter} from \"../helpers/measurements\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst calculateHangerWheelsInImperial = (truck, wheel) => {\r\n    // Missing washers\r\n    return toInches(truck.hanger_width_value, truck.hanger_width_unit) + toInches(wheel.width_value, wheel.width_unit) * 2\r\n};\r\n\r\nconst calculateHangerWheelsInMetric = (truck, wheel) => {\r\n    return toMillimeter(calculateHangerWheelsInImperial(truck, wheel), \"mm\")\r\n};\r\n\r\nconst Deck = ({deck, truck, wheel}) => (\r\n        <>\r\n            <Text>The complete width of your trucks and wheels will be {calculateHangerWheelsInMetric(truck, wheel).toFixed(3)}\"</Text>\r\n        </>\r\n);\r\n\r\nexport default Deck;\r\n","import React from \"react\";\r\nimport {Collapse, List} from 'antd';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst data = [\r\n    'VERY Alpha version, it\\'s full of bugs.',\r\n    'Custom fields do not work yet.',\r\n    'I plan to add washers (including custom ones)',\r\n    'Right now Deck is not doing anything. Still trying to figure out the best way to use the information.',\r\n    'I would like some kind of diagram to help with visualisation.',\r\n];\r\n\r\nconst Notes = () => {\r\n    return (\r\n        <Collapse ghost>\r\n            <Panel header=\"Notes\">\r\n                <List bordered dataSource={data} renderItem={item => <List.Item>- {item}</List.Item>}/>\r\n            </Panel>\r\n        </Collapse>\r\n    )\r\n};\r\n\r\nexport default Notes;\r\n","import React, {useState} from 'react';\nimport { Typography, Space } from 'antd';\nimport './App.css';\nimport Deck from \"./Deck\";\nimport Truck from \"./Truck\";\nimport Wheel from \"./Wheel\";\nimport Result from \"./Result\";\nimport {unitSymbol} from \"../helpers/measurements\";\nimport decks from \"../data/decks.json\";\nimport trucks from \"../data/trucks.json\";\nimport wheels from \"../data/wheels.json\";\nimport Notes from \"./Notes\";\n\nconst { Title } = Typography;\n\nconst App = () => {\n    const deckOptions = [\n        {value: 0, label: \"Custom\"},\n        ...decks.map(deck => ({\n            value: deck.id,\n            label: `${deck.manufacturer} ${deck.name} (${deck.width_value}${unitSymbol(deck.width_unit)})`,\n            ...deck\n        }))\n    ];\n    const [deck, setDeck] = useState(deckOptions[1]);\n\n    const truckOptions = [\n        {value: 0, label: \"Custom\"},\n        ...trucks.map(truck => ({\n            value: truck.id,\n            label: `${truck.manufacturer} ${truck.name} (${truck.axle_width_value}${unitSymbol(truck.axle_width_unit)})`,\n            ...truck\n        }))\n    ];\n    const [truck, setTruck] = useState(truckOptions[1]);\n\n    const wheelOptions = [\n        {value: 0, label: \"Custom\"},\n        ...wheels.map(wheel => ({\n            value: wheel.id,\n            label: `${wheel.manufacturer} ${wheel.name} (${wheel.width_value}${unitSymbol(wheel.width_unit)})`,\n            ...wheel\n        }))\n    ];\n    const [wheel, setWheel] = useState(wheelOptions[1]);\n\n    return (\n        <Space direction=\"vertical\">\n            <Title>Freestyle Truck Calculator</Title>\n            <Notes />\n            <Deck options={deckOptions} deck={deck} setDeck={setDeck}/>\n            <Truck options={truckOptions} truck={truck} setTruck={setTruck}/>\n            <Wheel options={wheelOptions} wheel={wheel} setWheel={setWheel}/>\n            <Result deck={deck} truck={truck} wheel={wheel}/>\n        </Space>\n    )\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
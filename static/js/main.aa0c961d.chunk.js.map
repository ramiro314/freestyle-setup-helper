{"version":3,"sources":["components/MeasurementInput.js","components/Deck.js","components/App.js","reportWebVitals.js","index.js"],"names":["Option","Select","selectAfter","defaultValue","className","value","MeasurementInput","addonAfter","Deck","options","deck","setDeck","f","direction","Item","label","onSelect","item","style","width","App","deckOptions","decks","map","id","manufacturer","name","width_value","unit","width_unit","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAGQA,EAAWC,IAAXD,OAEFE,EACF,eAAC,IAAD,CAAQC,aAAa,KAAKC,UAAU,eAApC,UACI,cAACJ,EAAD,CAAQK,MAAM,KAAd,gBACA,cAACL,EAAD,CAAQK,MAAM,KAAd,mBAQOC,EAJU,SAAC,GAAD,QAAGH,oBAAH,MAAkB,GAAlB,SACrB,cAAC,IAAD,CAAaI,WAAYL,EAAaC,aAAcA,KCazCK,EArBF,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,KAA4B,IAAtBC,eAAsB,MAAZ,SAAAC,GAAC,OAAIA,GAAO,EAMhD,OAAQ,qBAAKR,UAAU,OAAf,SACJ,eAAC,IAAD,CAAOS,UAAU,WAAjB,UACI,cAAC,IAAKC,KAAN,CAAWC,MAAM,OAAjB,SACI,cAAC,IAAD,CACIV,MAAOK,EAAKL,MACZI,QAASA,EACTO,SAVO,SAACC,GACpBN,EAAQF,EAAQQ,KAUJC,MAAO,CAAEC,MAAO,SAGR,MAAfT,EAAKL,OAAiB,cAAC,IAAKS,KAAN,CAAWC,MAAM,aAAjB,SAA8B,cAAC,EAAD,CAAkBZ,aAAc,c,QCQlFiB,EAnBH,WACR,IAAMC,EAAW,CACb,CAAChB,MAAO,IAAKU,MAAO,WADP,mBAEVO,EAAMC,KAAI,SAAAb,GAAI,MAAK,CAClBL,MAAOK,EAAKc,GACZT,MAAM,GAAD,OAAKL,EAAKe,aAAV,aAA2Bf,EAAKgB,KAAhC,aAAyChB,EAAKiB,aAA9C,QATGC,EASoElB,EAAKmB,WARhF,OAATD,EAAgB,IAAMA,GAQT,MATE,IAACA,OAIF,EASUE,mBAAST,EAAY,IAT/B,mBASPX,EATO,KASDC,EATC,KAYd,OACI,cAAC,IAAD,CAAOE,UAAU,WAAjB,SACI,cAAC,EAAD,CAAMJ,QAASY,EAAaX,KAAMA,EAAMC,QAASA,OCZ9CoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.aa0c961d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { InputNumber, Select } from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\nconst selectAfter = (\r\n    <Select defaultValue=\"in\" className=\"select-after\">\r\n        <Option value=\"in\">in</Option>\r\n        <Option value=\"mm\">mm</Option>\r\n    </Select>\r\n);\r\n\r\nconst MeasurementInput = ({ defaultValue = '' }) => (\r\n    <InputNumber addonAfter={selectAfter} defaultValue={defaultValue} />\r\n);\r\n\r\nexport default MeasurementInput;\r\n","import React from \"react\";\r\nimport {Form, Select, Space} from 'antd';\r\nimport MeasurementInput from \"./MeasurementInput\";\r\n\r\n\r\nconst Deck = ({options, deck, setDeck = f => f}) => {\r\n\r\n    const onchangeSelect = (item) => {\r\n        setDeck(options[item]);\r\n    };\r\n\r\n    return (<div className=\"Deck\">\r\n        <Space direction=\"vertical\">\r\n            <Form.Item label=\"Deck\">\r\n                <Select\r\n                    value={deck.value}\r\n                    options={options}\r\n                    onSelect={onchangeSelect}\r\n                    style={{ width: 250 }}\r\n                />\r\n            </Form.Item>\r\n            {deck.value === \"0\" && <Form.Item label=\"Deck Width\"><MeasurementInput defaultValue={7.6}/></Form.Item>}\r\n        </Space>\r\n    </div>);\r\n};\r\n\r\nexport default Deck;\r\n","import React, {useState} from 'react';\nimport { Space } from 'antd';\nimport './App.css';\nimport Deck from \"./Deck\";\nimport decks from \"../data/decks.json\";\n\nconst unitSymbol = (unit) => (\n    unit === \"in\" ? '\"' : unit\n);\n\nconst App = () => {\n    const deckOptions = [\n        {value: \"0\", label: \"Custom\"},\n        ...decks.map(deck => ({\n            value: deck.id,\n            label: `${deck.manufacturer}, ${deck.name} (${deck.width_value}${unitSymbol(deck.width_unit)})`\n        }))\n    ];\n\n    const [deck, setDeck] = useState(deckOptions[1]);\n\n\n    return (\n        <Space direction=\"vertical\">\n            <Deck options={deckOptions} deck={deck} setDeck={setDeck}/>\n        </Space>\n    )\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}